type Proxy @entity {
  id: ID!

  currentImplementation: Exchange

  implementations: [Exchange!]! @derivedFrom(field:"proxy")

  blockCount: BigInt!
}

type Exchange @entity {
  "Address of the exchange"
  id: ID!

  proxy: Proxy!

  tokens: [Token!]! @derivedFrom(field: "exchange")
}

type Token @entity {
  id: ID!

  "Exchange implementation active when the token was registered"
  exchange: Exchange!

  address: Bytes!

  decimals: Int!

  name: String!

  symbol: String!
}

type Block @entity {
  id: ID!

  operator: String!

  txHash: String!

  gasUsed: BigInt!

  gasPrice: BigInt!

  height: BigInt!

  timestamp: BigInt!

  blockHash: String!

  # Raw block data
  blockType: Int!
  blockSize: Int!
  blockVersion: Int!
  data: String!
  proof: [BigInt!]!
  storeBlockInfoOnchain: Boolean!
  offchainData: Bytes!

  # Parsed data from block
  protocolFeeTakerBips: String!
  protocolFeeMakerBips: String!
  numConditionalTransactions: String!
  operatorAccountID: String!

  transactions: [Transaction!]! @derivedFrom(field:"block")
}

interface Transaction {
  id: ID!

  data: String!

  block: Block!
}

type Deposit implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!
}

type SpotTrade implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!
}

type Transfer implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!
}

type Withdrawal implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!
}

type AccountUpdate implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!
}

type AmmUpdate implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!
}

type SignatureVerification implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!
}
