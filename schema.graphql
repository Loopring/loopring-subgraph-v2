type Proxy @entity {
  "Proxy ID is always '0'. There's only"
  id: ID!

  "Current implementation is represented by a link to the current Exchange entity"
  currentImplementation: Exchange

  "List of all historical Exchange entities"
  implementations: [Exchange!]! @derivedFrom(field: "proxy")

  "Total amount of block processed"
  blockCount: BigInt!
}

type Exchange @entity {
  "Address of the exchange implementation"
  id: ID!

  "Proxy link. Used to generate derived array of implementations."
  proxy: Proxy!

  "List of all tokens supported during the time this Exchange was the current implementation"
  tokens: [Token!]! @derivedFrom(field: "exchange")
}

type Token @entity {
  "Internal ID of the token within Loopring"
  id: ID!

  "Exchange active when the token was registered"
  exchange: Exchange!

  "Address of the token within the Ethereum network"
  address: Bytes!

  decimals: Int!

  name: String!

  symbol: String!

  "Total traded volume for this token across all token pairs. Denominated in it's own currency"
  tradedVolume: BigInt!

  dailyEntities: [TokenDailyData!]! @derivedFrom(field: "token")
  weeklyEntities: [TokenWeeklyData!]! @derivedFrom(field: "token")
}

type Pair @entity {
  "ID is recreated following the next pattern to standardize pair IDs: <LOWEST Token ID>-<HIGHEST Token ID>"
  id: ID!

  token0: Token!

  token1: Token!

  "Last price of Token 0. Denominated in Token 1"
  token0Price: BigInt!

  "Last price of Token 1. Denominated in Token 0"
  token1Price: BigInt!

  "Total traded volume of token 0 within this pair. Denominated in it's own currency"
  tradedVolumeToken0: BigInt!

  "Total traded volume of token 1 within this pair. Denominated in it's own currency"
  tradedVolumeToken1: BigInt!

  trades: [SpotTrade!]! @derivedFrom(field: "pair")

  dailyEntities: [PairDailyData!]! @derivedFrom(field: "pair")
  weeklyEntities: [PairWeeklyData!]! @derivedFrom(field: "pair")
}

type Block @entity {
  id: ID!

  "Transaction hash for the L1 Transaction where the L2 Block was submitted"
  txHash: String!

  "Amount of gas used. Known issue -> Currently equals the gasLimit and not the actual gas used."
  gasUsed: BigInt!

  "Gas price for the L1 transaction"
  gasPrice: BigInt!

  "L1 Block height where the L2 Block was submitted"
  height: BigInt!

  "L1 Block timestamp when the L2 Block was submitted"
  timestamp: BigInt!

  "Hash of the L1 Block where the L2 block was submitted"
  blockHash: String!

  # Raw block data
  "L2 Block type represented as an Integer"
  blockType: Int!
  "L2 Block size. Represents the maximum amount of L2 transactions that it could handle."
  blockSize: Int!
  "L2 Block version"
  blockVersion: Int!
  "Raw data for the L2 block. Represented as a Hex String."
  data: String!
  "L2 proof data"
  proof: [BigInt!]!
  storeBlockInfoOnchain: Boolean!
  offchainData: Bytes!

  # Parsed data from block
  "Protocol fee applied to the 'taker' for L2 transactions within this block"
  protocolFeeTakerBips: Int!
  "Protocol fee applied to the 'maker' for L2 transactions within this block"
  protocolFeeMakerBips: Int!
  numConditionalTransactions: Int!
  "Account ID for the operator of this L2 Block"
  operatorAccountID: Int!

  "Account entity for the operator of this L2 Block"
  operatorAccount: Account!

  "List of L2 Transactions for this L2 Block"
  transactions: [Transaction!]! @derivedFrom(field: "block")
}

interface Account {
  "Internal ID used in the L2 transactions. Users will be of type User and have an ID > 10000. Pools will be of type Pool and have an id < 10000. ProtocolAccount is a special account with ID 0 which handles all token balances generated by protocol fees."
  id: ID!

  "Address linked to the account ID"
  address: Bytes!

  "List of all the balances for each specific token the account has interacted with"
  balances: [AccountTokenBalance!]! @derivedFrom(field: "account")

  "L2 transaction where the account was first created and linked to an address"
  createdAt: Transaction!

  "L2 transaction that last updated the account entity"
  lastUpdatedAt: Transaction!
}

type User implements Account @entity {
  "Internal ID used in the L2 transactions"
  id: ID!

  address: Bytes!

  "String representing the public key for the User"
  publicKey: String

  balances: [AccountTokenBalance!]! @derivedFrom(field: "account")

  createdAt: Transaction!

  lastUpdatedAt: Transaction!
}

type Pool implements Account @entity {
  "Internal ID used in the L2 transactions"
  id: ID!

  address: Bytes!

  feeBipsAMM: Int

  balances: [AccountTokenBalance!]! @derivedFrom(field: "account")

  createdAt: Transaction!

  lastUpdatedAt: Transaction!
}

type ProtocolAccount implements Account @entity {
  "ID is always 0 since there's only a single ProtocolAccount and uses the reserved id 0"
  id: ID!

  address: Bytes!

  balances: [AccountTokenBalance!]! @derivedFrom(field: "account")

  createdAt: Transaction!

  lastUpdatedAt: Transaction!
}

type AccountTokenBalance @entity {
  "ID is recreated following this pattern: <ACCOUNT ID>-<TOKEN ID>. Example: 10001-1"
  id: ID!

  balance: BigInt!

  "Link to the Account entity. Can be a Pool or User entity"
  account: Account!

  "Link to the Token entity. Holds all details of the token itself."
  token: Token!

  transactions: [Transaction!]! @derivedFrom(field:"tokenBalances")
}

interface Transaction {
  "All transactions IDs follow the same pattern: <BLOCK ID>-<TX INDEX>"
  id: ID!

  "Hex string representation of the encoded L2 data for this Transaction"
  data: String!

  "Link to the Block entity where this Transaction took place"
  block: Block!

  tokenBalances: [AccountTokenBalance!]
}

type Deposit implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!

  "Account entity that deposited the tokens"
  toAccount: Account!

  "Token entity with information about the deposited token"
  token: Token!

  # Raw data parsed from the L2 data
  "[RAW L2 DATA] Address string of the account that deposited"
  to: String!
  "[RAW L2 DATA] Account ID for the account that deposited"
  toAccountID: Int!
  "[RAW L2 DATA] Token ID of the deposited token"
  tokenID: Int!
  "[RAW L2 DATA] Amount deposited"
  amount: BigInt!

  tokenBalances: [AccountTokenBalance!]
}

type Withdrawal implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!

  "Account entity that withdrew the tokens"
  fromAccount: Account!

  "Token entity with information about the withdrawn token"
  token: Token!

  "Token entity with information about the token used to pay the operator fees"
  feeToken: Token!

  # Raw data parsed from the L2 data
  "[RAW L2 DATA] Withdrawal type"
  type: Int!
  "[RAW L2 DATA] Address string of the account that withdrew"
  from: String!
  "[RAW L2 DATA] Account ID for the account that withdrew"
  fromAccountID: Int!
  "[RAW L2 DATA] Token ID of the withdrawn token"
  tokenID: Int!
  "[RAW L2 DATA] Amount withdrawn"
  amount: BigInt!
  "[RAW L2 DATA] Token ID of token used to pay the operator fees"
  feeTokenID: Int!
  "[RAW L2 DATA] Fee amount paid"
  fee: BigInt!
  "[RAW L2 DATA] On-chain data hash"
  onchainDataHash: String!
  "[RAW L2 DATA] StorageID"
  storageID: Int!

  tokenBalances: [AccountTokenBalance!]
}

type Transfer implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!

  "Account entity that sent the tokens"
  fromAccount: Account!

  "Account entity that received the tokens"
  toAccount: Account!

  "Token entity with information about the token transfered"
  token: Token!

  "Token entity with information about the token used to pay the operator fees"
  feeToken: Token!

  # Raw data parsed from the L2 data
  "[RAW L2 DATA] Transfer type"
  type: Int!
  "[RAW L2 DATA] Account ID for the account that sent the tokens"
  accountFromID: Int!
  "[RAW L2 DATA] Account ID for the account that received the tokens"
  accountToID: Int!
  "[RAW L2 DATA] Token ID of the token transfered"
  tokenID: Int!
  "[RAW L2 DATA] Amount transfered"
  amount: BigInt!
  "[RAW L2 DATA] Token ID of token used to pay the operator fees"
  feeTokenID: Int!
  "[RAW L2 DATA] Fee amount paid"
  fee: BigInt!
  "[RAW L2 DATA] StorageID"
  storageID: Int!
  "[RAW L2 DATA] Address string of the account that sent the tokens"
  from: String!
  "[RAW L2 DATA] Address string of the account that received the tokens"
  to: String!

  tokenBalances: [AccountTokenBalance!]
}

type SpotTrade implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!

  "Account entity A"
  accountA: Account!
  "Account entity B"
  accountB: Account!

  "Token A. Supplied by Account A"
  tokenA: Token!
  "Token B. Supplied by Account B"
  tokenB: Token!

  "Price for 1 unit of token A for this trade. Denominated in token B"
  tokenAPrice: BigInt!
  "Price for 1 unit of token B for this trade. Denominated in token A"
  tokenBPrice: BigInt!

  "Standardized Pair entity for this trade"
  pair: Pair!

  # Raw data parsed from the L2 data
  "[RAW L2 DATA] StorageID for account A"
  storageIdA: Int!
  "[RAW L2 DATA] StorageID for account B"
  storageIdB: Int!

  "[RAW L2 DATA] Account ID of account A"
  accountIdA: Int!
  "[RAW L2 DATA] Account ID of account B"
  accountIdB: Int!

  "[RAW L2 DATA] Token ID of token A"
  tokenIDA: Int!
  "[RAW L2 DATA] Token ID of token B"
  tokenIDB: Int!

  "[RAW L2 DATA] Float encoded value for fillSA represented as an Int"
  fFillSA: Int!
  "[RAW L2 DATA] Float encoded value for fillSB represented as an Int"
  fFillSB: Int!

  "[RAW L2 DATA] Amount of token A sold by Account A"
  fillSA: BigInt!
  "[RAW L2 DATA] Amount of token B sold by Account B"
  fillSB: BigInt!

  "[RAW L2 DATA] Order data A"
  orderDataA: Int!
  "[RAW L2 DATA] Order data B"
  orderDataB: Int!

  "[RAW L2 DATA] Limit mask value for order A"
  limitMaskA: BigInt!
  "[RAW L2 DATA] Fee bips for order A"
  feeBipsA: BigInt!
  "[RAW L2 DATA] Is fill amount for buy or sell for order A"
  fillAmountBorSA: Boolean!

  "[RAW L2 DATA] Limit mask value for order B"
  limitMaskB: BigInt!
  "[RAW L2 DATA] Fee bips for order B"
  feeBipsB: BigInt!
  "[RAW L2 DATA] Is fill amount for buy or sell for order B"
  fillAmountBorSB: Boolean!

  "[RAW L2 DATA] Amount of token B bought by Account A"
  fillBA: BigInt!
  "[RAW L2 DATA] Amount of token A bought by Account B"
  fillBB: BigInt!

  "[RAW L2 DATA] Fee paid by Account A with Token B"
  feeA: BigInt!
  "[RAW L2 DATA] Protocol fees paid by Account A"
  protocolFeeA: BigInt!

  "[RAW L2 DATA] Fee paid by Account B with token A"
  feeB: BigInt!
  "[RAW L2 DATA] Protocol fees paid by Account B"
  protocolFeeB: BigInt!

  tokenBalances: [AccountTokenBalance!]
}

type AccountUpdate implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!

  "User account entity updated in this transaction"
  user: User!

  "Token entity with information about the token used to pay the operator fees"
  feeToken: Token!

  # Raw data parsed from the L2 data
  "[RAW L2 DATA] Update type"
  updateType: Int!
  "[RAW L2 DATA] Address of the user account updated"
  owner: String!
  "[RAW L2 DATA] Account ID of the user account updated"
  accountID: Int!
  "[RAW L2 DATA] Token ID of token used to pay the operator fees"
  feeTokenID: Int!
  "[RAW L2 DATA] Fee amount paid"
  fee: BigInt!
  "[RAW L2 DATA] Updated public key for the account"
  publicKey: String!
  "[RAW L2 DATA] Nonce"
  nonce: Int!

  tokenBalances: [AccountTokenBalance!]
}

type AmmUpdate implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!

  "Pool account entity updated in this transaction"
  pool: Pool!

  # Raw data parsed from the L2 data
  "[RAW L2 DATA] Address of the pool account updated"
  owner: String!
  "[RAW L2 DATA] Account ID of the pool account updated"
  accountID: Int!
  tokenID: Int!
  feeBips: Int!
  tokenWeight: BigInt!
  nonce: Int!
  balance: BigInt!

  tokenBalances: [AccountTokenBalance!]
}

type SignatureVerification implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!

  "Account entity updated in this transaction"
  account: Account!

  # Raw data parsed from the L2 data
  "[RAW L2 DATA] Address of the account updated"
  owner: String!
  "[RAW L2 DATA] Account ID of the pool account updated"
  accountID: Int!
  "[RAW L2 DATA] Signature verification data"
  verificationData: String!

  tokenBalances: [AccountTokenBalance!]
}

type MintNFT implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!

  tokenBalances: [AccountTokenBalance!]
}

type DataNFT implements Transaction @entity {
  id: ID!

  data: String!

  block: Block!

  tokenBalances: [AccountTokenBalance!]
}

type PairDailyData @entity {
  "The ID follows this pattern: <PAIR ID>-<DAY NUMBER>."
  id: ID!

  pair: Pair!

  "Timestamp of the start of the day. Timezone -> UTC"
  dayStart: BigInt!

  "Timestamp of the end of the day. Timezone -> UTC"
  dayEnd: BigInt!

  "Day number is the amount of days since the start block of Loopring 3.6 (block 11149814)"
  dayNumber: Int!

  "Lowest price for token 0 during the time interval"
  token0PriceLow: BigInt!

  "Lowest price for token 1 during the time interval"
  token1PriceLow: BigInt!

  "Highest price for token 0 during the time interval"
  token0PriceHigh: BigInt!

  "Highest price for token 1 during the time interval"
  token1PriceHigh: BigInt!

  "Price for token 0 at the end of the time interval"
  token0PriceClose: BigInt!

  "Price for token 1 at the end of the time interval"
  token1PriceClose: BigInt!

  "Price for token 0 at the start of the time interval"
  token0PriceOpen: BigInt!

  "Price for token 1 at the start of the time interval"
  token1PriceOpen: BigInt!

  tradedVolumeToken0: BigInt!
  tradedVolumeToken1: BigInt!
}

type TokenDailyData @entity {
  "The ID follows this pattern: <TOKEN ID>-<DAY NUMBER>."
  id: ID!

  token: Token!

  "Timestamp of the start of the day. Timezone -> UTC"
  dayStart: BigInt!

  "Timestamp of the end of the day. Timezone -> UTC"
  dayEnd: BigInt!

  "Day number is the amount of days since the start block of Loopring 3.6 (block 11149814)"
  dayNumber: Int!

  tradedVolume: BigInt!
}

type PairWeeklyData @entity {
  "The ID follows this pattern: <PAIR ID>-<WEEK NUMBER>."
  id: ID!

  pair: Pair!

  "Timestamp of the start of the week. Timezone -> UTC"
  weekStart: BigInt!

  "Timestamp of the end of the week. Timezone -> UTC"
  weekEnd: BigInt!

  "Week number is the amount of weeks since the start block of Loopring 3.6 (block 11149814)"
  weekNumber: Int!

  "Lowest price for token 0 during the time interval"
  token0PriceLow: BigInt!

  "Lowest price for token 1 during the time interval"
  token1PriceLow: BigInt!

  "Highest price for token 0 during the time interval"
  token0PriceHigh: BigInt!

  "Highest price for token 1 during the time interval"
  token1PriceHigh: BigInt!

  "Price for token 0 at the end of the time interval"
  token0PriceClose: BigInt!

  "Price for token 1 at the end of the time interval"
  token1PriceClose: BigInt!

  "Price for token 0 at the start of the time interval"
  token0PriceOpen: BigInt!

  "Price for token 1 at the start of the time interval"
  token1PriceOpen: BigInt!

  tradedVolumeToken0: BigInt!
  tradedVolumeToken1: BigInt!
}

type TokenWeeklyData @entity {
  "The ID follows this pattern: <TOKEN ID>-<WEEK NUMBER>."
  id: ID!

  token: Token!

  "Timestamp of the start of the week. Timezone -> UTC"
  weekStart: BigInt!

  "Timestamp of the end of the week. Timezone -> UTC"
  weekEnd: BigInt!

  "Week number is the amount of weeks since the start block of Loopring 3.6 (block 11149814)"
  weekNumber: Int!

  tradedVolume: BigInt!
}
